global !p
def math():
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'
endglobal

context "math()"
snippet "([_\^])((?:[^\W_]|[,+\-\\]){2,}|\((?:[^\W_]|[,+\-\\])+)" "Auto Sub/Super" wrA
`!p snip.rv=match.group(1)`{`!p snip.rv=match.group(2)`$1}$2
endsnippet

snippet frac "Fraction" w
\frac{${1:n}}{${2:d}}$3
endsnippet

snippet beg "Begin" w
\begin{$1}
    $2
\end{$1}
endsnippet

snippet def "Definition" b
\begin{definition}[${1:Title}]
    $2
\end{definition}
endsnippet

snippet ex "Example" b
\begin{example}
    $1
\end{example}
endsnippet

snippet thm "Theorem" b
\begin{thm}[${1:Title}]
    $2
\end{thm}
endsnippet

snippet thm* "Theorem unnumbered" b
\begin{thm*}[${1:Title}]
    $2
\end{thm*}
endsnippet

snippet lem "Lemma" b
\begin{lem}[${1:Title}]
    $2
\end{lem}
endsnippet

snippet cor "Corollary" b
\begin{cor}[${1:Title}]
    $2
\end{cor}
endsnippet

snippet pf "Proof" b
\begin{proof}
    $1
\end{proof}
endsnippet

snippet no "Note" b
\note{
    $1
}
endsnippet

snippet item "Itemize" b
\begin{itemize}[${1:<+->}]
    \item $0
\end{itemize}
endsnippet

snippet enum "Enumerate" b
\begin{enumerate}[${1:i.}]
    \item $0
\end{enumerate}
endsnippet

snippet em "Emph" w
\emph{$1}$2
endsnippet

context "math()"
snippet "<-" "gets" rA
\gets
endsnippet

context "math()"
snippet "->" "rightarrow" rA
\rightarrow
endsnippet

context "math()"
snippet "=>" "implies" rA
\implies
endsnippet

context "math()"
snippet "<=" "leq" rA
\leq
endsnippet

context "math()"
snippet ">=" "geq" rA
\geq
endsnippet

context "math()"
snippet "!=" "neq" rA
\neq
endsnippet

context "math()"
snippet "\<([^\$\<]*?)\>\>" "Angle" rA
\langle `!p snip.rv = match.group(1)` \rangle
endsnippet

context "math()"
snippet "\\abs{(.+?)}\|\|" "Norm" rA
\norm{`!p snip.rv = match.group(1)`}
endsnippet

context "math()"
snippet "\|([^\$\|]*?)\|" "Abs" rA
\abs{`!p snip.rv = match.group(1)`}
endsnippet

context "math()"
snippet "\<([^\$\ ]+?)\|" "Bra" rA
\bra{`!p snip.rv = match.group(1)`}
endsnippet

context "math()"
snippet "\|([^\$\ ]+?)\>" "Ket" rA
\ket{`!p snip.rv = match.group(1)`}
endsnippet

context "math()"
snippet "\\bra{(.+?)}([^\|]+?)\>" "Braket" riA
`!p snip.rv = match.group(1)`\braket{`!p snip.rv = match.group(2)`}{`!p snip.rv = match.group(3)`}
endsnippet

snippet arr "Array" b
\begin{array}{${1:ccc}}
    ${2}
\end{array}
endsnippet

snippet algo "Algorithm block" b
\begin{algorithm}
\SetKwFunction{${3:func}}{$4}
\Fn{\\$3{$x$}}{
}
\caption{${1:caption}}\label{alg:${2:label}}
\end{algorithm}
endsnippet

priority 10
snippet "mint(\S+)?" "Minted code typeset" br
\begin{minted}[fontsize=\\${2:footnotesize}]{${1:`!p
snip.rv = match.group(1) if match.group(1) is not None else "lang"`}}
${3:remember to fragile}
\end{minted}
endsnippet

priority 100
snippet "mintin" "Minted code inline" b
\mintinline{${1:lang}}|$2|$3
endsnippet

priority 1000
snippet math "Maxima block" w
math $1 math$0
endsnippet

priority 10000
snippet "math(.*)math" "Evaluate Maxima" wr
`!p import subprocess
cmd = match.group(1) + " tex(%, false);";
snip.rv = subprocess.check_output(['maxima', '--very-quiet', '--batch-string',
cmd], universal_newlines=True).split('\n')[-2]
`
endsnippet

snippet subfigure "Fig with subfigs" w
\begin{figure}[H] 
    \begin{subfigure}[${1:t}]{${2:0.45}\textwidth}
    \centering
    \includegraphics[width=\linewidth]{${3:}}
    \caption{${4:}}\label{fig:${5:}}
    \end{subfigure}
    \hspace{1em}
    \caption{${6:}}\label{fig:${7:}}
\end{figure}
endsnippet

snippet subfig "Subfigure" w
\begin{subfigure}[${1:t}]{${2:0.45}\textwidth}
    \centering
    \includegraphics[width=\linewidth]{${3:}}
    \caption{${4:}}
    \label{fig:${5:}}
\end{subfigure}
endsnippet

snippet mini "Minipage" w
\begin{minipage}[${1:t}]{${2:0.45}\linewidth}
    \setlength{\parskip}{1em}
    ${3}
\end{minipage}
endsnippet

snippet cas "Case" w
\begin{cases}
    ${1:case1} ,&\text{ if }${2} \\\\
    ${3} ,&\text{ otherwise }${4}
\end{cases}
endsnippet

priority 1000
snippet ink "Inkscape preparation" w
fig $1 fig$0
endsnippet

priority 10000
snippet "fig (.*) fig" "Insert inkscape figure" wr
\begin{figure}[ht]
\centering
\def\svgwidth{${3:.6}\linewidth}
\import{./figures/}{${1:`!p
if snip.c != "":
    pass
else:
    import os
    import re

    figureDir = os.path.join(os.getcwd(), "figures/")
    # regex to make into kebab case
    figureName = "-".join([x.lower() for x in re.findall(r'\w+', match.group(1))])
    figurePath = figureDir + figureName + '.svg'
    pdfPath = figureDir + figureName + '.pdf'

    if os.path.isfile(figurePath):
        snip.rv = "File already exists!"
    else:
        import subprocess
        templatePath = os.path.expanduser("~/.config/inkscape/templates/default1024.svg")
        subprocess.call(['mkdir', '-p', figureDir])
        subprocess.check_output(['cp', templatePath, figurePath])
        subprocess.call(['inkscape', '--export-latex', '-o', pdfPath, figurePath])
        snip.rv = figureName
`}.pdf_tex}
\caption{${2:caption}}
\label{fig:$1}
%edit $1 edit%$4
\end{figure}$0
endsnippet

snippet "%edit (.*) edit%" "Edit svg" wr
%edit `!p
if snip.c != "":
    pass
else:
    import subprocess
    figureName = match.group(1)
    figureStem = os.path.join(os.getcwd(), "figures/", figureName)
    figurePath = figureStem + '.svg'
    pdfPath = figureStem + '.pdf'
    proc = subprocess.Popen(['inkscape', figurePath]) # open in bg

    from inotify_simple import INotify, flags
    inotify = INotify()
    inotify.add_watch(figurePath, flags.MODIFY)

    update = lambda : subprocess.call(['inkscape', '--export-latex',
    '-o', pdfPath, figurePath])
    while True:
        if proc.poll() is not None:
            update()
            break # inkscape closed
        else:
            l = inotify.read(timeout=500) # block and wait for inotify
            if (len(l) > 0):
                update()

    inotify.close()
    snip.rv = match.group(1)
` edit%$0
endsnippet
